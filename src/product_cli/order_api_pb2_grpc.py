# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import order_api_pb2 as order__api__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in order_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrderServiceStub(object):
    """Service ที่จัดการเกี่ยวกับ Order
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/order_api.OrderService/CreateOrder',
                request_serializer=order__api__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=order__api__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/order_api.OrderService/GetOrder',
                request_serializer=order__api__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=order__api__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.UpdateOrderStatus = channel.unary_unary(
                '/order_api.OrderService/UpdateOrderStatus',
                request_serializer=order__api__pb2.UpdateOrderStatusRequest.SerializeToString,
                response_deserializer=order__api__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.CountOrders = channel.unary_unary(
                '/order_api.OrderService/CountOrders',
                request_serializer=order__api__pb2.CountRequest.SerializeToString,
                response_deserializer=order__api__pb2.CountResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Service ที่จัดการเกี่ยวกับ Order
    """

    def CreateOrder(self, request, context):
        """ฟังก์ชันสร้าง Order ใหม่
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """ฟังก์ชันดึงข้อมูล Order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=order__api__pb2.CreateOrderRequest.FromString,
                    response_serializer=order__api__pb2.OrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=order__api__pb2.GetOrderRequest.FromString,
                    response_serializer=order__api__pb2.OrderResponse.SerializeToString,
            ),
            'UpdateOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrderStatus,
                    request_deserializer=order__api__pb2.UpdateOrderStatusRequest.FromString,
                    response_serializer=order__api__pb2.OrderResponse.SerializeToString,
            ),
            'CountOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CountOrders,
                    request_deserializer=order__api__pb2.CountRequest.FromString,
                    response_serializer=order__api__pb2.CountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order_api.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('order_api.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Service ที่จัดการเกี่ยวกับ Order
    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.OrderService/CreateOrder',
            order__api__pb2.CreateOrderRequest.SerializeToString,
            order__api__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.OrderService/GetOrder',
            order__api__pb2.GetOrderRequest.SerializeToString,
            order__api__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.OrderService/UpdateOrderStatus',
            order__api__pb2.UpdateOrderStatusRequest.SerializeToString,
            order__api__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.OrderService/CountOrders',
            order__api__pb2.CountRequest.SerializeToString,
            order__api__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ProductServiceStub(object):
    """--- Product Service  ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProduct = channel.unary_unary(
                '/order_api.ProductService/CreateProduct',
                request_serializer=order__api__pb2.CreateProductRequest.SerializeToString,
                response_deserializer=order__api__pb2.ProductResponse.FromString,
                _registered_method=True)
        self.CountProducts = channel.unary_unary(
                '/order_api.ProductService/CountProducts',
                request_serializer=order__api__pb2.CountRequest.SerializeToString,
                response_deserializer=order__api__pb2.CountResponse.FromString,
                _registered_method=True)
        self.GetProduct = channel.unary_unary(
                '/order_api.ProductService/GetProduct',
                request_serializer=order__api__pb2.GetProductRequest.SerializeToString,
                response_deserializer=order__api__pb2.ProductResponse.FromString,
                _registered_method=True)
        self.ListProducts = channel.unary_stream(
                '/order_api.ProductService/ListProducts',
                request_serializer=order__api__pb2.ListProductsRequest.SerializeToString,
                response_deserializer=order__api__pb2.ProductResponse.FromString,
                _registered_method=True)
        self.DeleteProduct = channel.unary_unary(
                '/order_api.ProductService/DeleteProduct',
                request_serializer=order__api__pb2.DeleteProductRequest.SerializeToString,
                response_deserializer=order__api__pb2.DeleteProductResponse.FromString,
                _registered_method=True)
        self.EditProduct = channel.unary_unary(
                '/order_api.ProductService/EditProduct',
                request_serializer=order__api__pb2.EditProductRequest.SerializeToString,
                response_deserializer=order__api__pb2.ProductResponse.FromString,
                _registered_method=True)


class ProductServiceServicer(object):
    """--- Product Service  ---
    """

    def CreateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProduct,
                    request_deserializer=order__api__pb2.CreateProductRequest.FromString,
                    response_serializer=order__api__pb2.ProductResponse.SerializeToString,
            ),
            'CountProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.CountProducts,
                    request_deserializer=order__api__pb2.CountRequest.FromString,
                    response_serializer=order__api__pb2.CountResponse.SerializeToString,
            ),
            'GetProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProduct,
                    request_deserializer=order__api__pb2.GetProductRequest.FromString,
                    response_serializer=order__api__pb2.ProductResponse.SerializeToString,
            ),
            'ListProducts': grpc.unary_stream_rpc_method_handler(
                    servicer.ListProducts,
                    request_deserializer=order__api__pb2.ListProductsRequest.FromString,
                    response_serializer=order__api__pb2.ProductResponse.SerializeToString,
            ),
            'DeleteProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProduct,
                    request_deserializer=order__api__pb2.DeleteProductRequest.FromString,
                    response_serializer=order__api__pb2.DeleteProductResponse.SerializeToString,
            ),
            'EditProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.EditProduct,
                    request_deserializer=order__api__pb2.EditProductRequest.FromString,
                    response_serializer=order__api__pb2.ProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order_api.ProductService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('order_api.ProductService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProductService(object):
    """--- Product Service  ---
    """

    @staticmethod
    def CreateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.ProductService/CreateProduct',
            order__api__pb2.CreateProductRequest.SerializeToString,
            order__api__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.ProductService/CountProducts',
            order__api__pb2.CountRequest.SerializeToString,
            order__api__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.ProductService/GetProduct',
            order__api__pb2.GetProductRequest.SerializeToString,
            order__api__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/order_api.ProductService/ListProducts',
            order__api__pb2.ListProductsRequest.SerializeToString,
            order__api__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.ProductService/DeleteProduct',
            order__api__pb2.DeleteProductRequest.SerializeToString,
            order__api__pb2.DeleteProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_api.ProductService/EditProduct',
            order__api__pb2.EditProductRequest.SerializeToString,
            order__api__pb2.ProductResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
